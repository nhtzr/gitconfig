# This is Git's per-user configuration file.
[user]
  name = Ezequiel Rosas
  email = ezequiel.rosas@digitalonus.com

[core]
  autocrlf = input
  excludesfile = ~/.gitignore

[push]
  default = simple

[pull]
  ff = only

[color]
  ui = auto
  branch = auto
  diff = auto
  interactive = auto
  status = auto

[color "branch"]
  current = green reverse
  local = normal
  remote = blue
  upstream = green
[color "diff"]
  meta = blue bold reverse
  frag = blue dim reverse
  commit = blue bold reverse ul
  func = normal reverse
  context = normal
  old = dim
  new = bold
  whitespace = white reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[alias]
  st = status -suno
  stu = status -su
  lg = "!nvim -c 'GV'"
  lgm = "!nvim -c 'GV --first-parent'"
  lga = "!nvim -c 'GV --tags --all'"
  adu = "!f() { git add -u; git status -su; }; f;"
  bmw = blame -M -w
  co = checkout
  cob = checkout -b
  rco = "!f() { git reset HEAD -q -- \"$@\"; git checkout HEAD -q -- \"$@\"; }; f"
  rh = reset --hard
  rhh = reset --hard HEAD
  dh = diff HEAD --
  dhh = diff HEAD -- .
  fixup = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
  pick = cherry-pick
  edit = "!f() { git reset --soft 'HEAD^' -q ; git status -su ; echo 'Remember to run \\033[0;34mgit commit\\033[0m'; }; f"
  drop = rebase --skip
  skip = rebase --skip
  continue = rebase --continue
  abort = rebase --abort
  fa = fetch --all
  pf = push --force
  pr = pull --rebase
  prom = pull --rebase origin master
  srom = "! f() { git fetch origin master; git reset --soft origin/master };f"
  irom = "! f() { git fetch origin master; git rebase --interactive origin/master };f"
  rbi = rebase --interactive
  ff = merge --ff-only
  rlff = merge --ff-only HEAD@{1}
  cim = merge --no-ff
  pu = "! git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
  pup = !git pull && git submodule init && git submodule update && git submodule status && git submodule foreach git pull origin master
  refs = for-each-ref --format='%(refname)'
  tags = for-each-ref --format='%(refname)' refs/tags
  rems = for-each-ref --format='%(refname)' refs/remotes
  remove-branches = "! f(){ tmp=\"$(mktemp)\" ; git branch -vv | grep origin > $tmp ; git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 $tmp | awk '{print $1}' | xargs git branch -d ; }; f;"
  prune-all = "!{ git prune; git remote | while read -r remote; do git remote prune $remote; done; git remove-branches; };"

[diff]
  algorithm = patience
  tool = vimdiff
  indentHeuristic = true

[merge]
  tool = vimdiff

