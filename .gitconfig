# This is Git's per-user configuration file.
[user]
  name = Ezequiel Rosas
  email = ezequiel.rosas@digitalonus.com

[core]
  autocrlf = input
  excludesfile = ~/.gitignore

[push]
  default = simple

[pull]
  ff = only

[color]
  ui = auto
  branch = auto
  diff = auto
  interactive = auto
  status = auto

[color "branch"]
  current = green reverse
  local = normal
  remote = blue
  upstream = green
[color "diff"]
  meta = blue bold reverse
  frag = blue dim reverse
  commit = blue bold reverse ul
  func = normal reverse
  context = normal
  old = dim
  new = bold
  whitespace = white reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[alias]
  top = "!f() { echo $(git rev-parse --show-toplevel)${1+/}$1 ; } ; f"
  pwd = rev-parse --show-prefix
  st = "!f() { git status -suno ; }; f"
  stu = "!f() { git status -su ; }; f"
  view = show
  info = show
  sti = !echo ':silent Gstatus\n:silent wincmd o\n:silent nunmap <silent> <buffer> q\n:silent nnoremap q :quit<cr>' | nvim -s -
  lg = "!f() {  nvim -c \"$(toCommandString GV \"$@\")\" -c 'tabonly' -c 'nunmap <silent> <buffer> q' -c 'nnoremap q :quit!<cr>'; }; f"
  lgm = "!f() { nvim -c \"$(toCommandString GV \"$@\")\" -c 'tabonly' -c 'nunmap <silent> <buffer> q' -c 'nnoremap q :quit!<cr>'; }; f --first-parent"
  lga = "!f() { nvim -c \"$(toCommandString GV \"$@\")\" -c 'tabonly' -c 'nunmap <silent> <buffer> q' -c 'nnoremap q :quit!<cr>'; }; f --tags --all"
  adu = "!f() { git add -u; git status -su; }; f;"
  rco = "!f() { git reset HEAD -q -- \"$@\"; git checkout HEAD -q -- \"$@\"; }; f"
  co = checkout
  cob = checkout -b
  pf = push --force-with-lease
  ir = rebase --interactive
  pr = pull --rebase
  prom = pull --rebase origin master

  rs = reset --soft
  rh = reset --hard
  dh = "!f() { git diff \"$@\" -- ; }; f"

  rhh = reset --hard HEAD
  rsh = reset --soft HEAD
  dhh = diff HEAD --

  rhp = reset --hard '@{push}'
  rsp = reset --soft '@{push}'
  dhp = diff '@{push}' --

  irom = rebase --interactive origin/master
  rsom = reset --soft origin/master
  rhom = reset --hard origin/master
  dhom = diff origin/master --

  fixup = "!f() { TARGET=$(git rev-parse $1); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
  pick = cherry-pick
  edit = "!f() { TARGET=$(git rev-parse HEAD); printf 'You can abort this edition with \\033[0;34mgit ff '; printf $(git rev-parse HEAD); echo '\\033[0m'; git show $TARGET --format=full -s; git reset --soft 'HEAD^' -q ; }; f"
  unpick = "!f() { COMMIT_ID=${1?} ; shift; git show $COMMIT_ID -- ${@?} | git apply -R; }; f"
  unapply = apply -R
  drop = rebase --skip
  skip = rebase --skip
  continue = rebase --continue
  abort = rebase --abort
  fa = "!f(){ git remote set-branches origin '*'; git fetch --all; }; f"
  ff = merge --ff-only
  pu = "!f(){ git push --set-upstream ${1:-origin} $(git rev-parse --abbrev-ref HEAD); }; f"
  pup = !git pull && git submodule init && git submodule update && git submodule status && git submodule foreach git pull origin master
  refs = for-each-ref --format='%(refname)'
  tags = for-each-ref --format='%(refname)' refs/tags
  rems = for-each-ref --format='%(refname)' refs/remotes
  prune-all = "!git fetch --all --prune; git remote | xargs -r -L1 git prune; git remove-branches"
  remove-branches = "!git branch -l --format='%(refname:short)' --merged origin/master | grep -vF master | xargs -r -L1 git branch -d;"
  cdf = clean -df
  download = clone --depth=1
  bmw = blame -M -w
  track = branch -u
  code-changes = !git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10
  # https://stackoverflow.com/questions/4698759/ v
  shallow = "!f(){ git show-ref -s HEAD > .git/shallow; git reflog expire --expire=0; git prune; git prune-packed; git gc; }; f"

[diff]
  algorithm = patience
  tool = vimdiff
  indentHeuristic = true

[merge]
  tool = vimdiff

[filesystem "Oracle Corporation|14.0.1|/dev/disk1s2"]
  timestampResolution = 6000 nanoseconds
  minRacyThreshold = 0 nanoseconds

